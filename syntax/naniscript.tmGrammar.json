{
    "name": "NaniScript",
    "scopeName": "source.naniscript",
    "fileTypes": ["nani"],
    "patterns": [
        { "include": "#command" },
        {
            "patterns": [
                {
                    "comment": "Comment - ;...",
                    "name": "naniscript.comment",
                    "match": "^[\\t ]*(;.*)$"
                },
                {
                    "comment": "Label - #...",
                    "name": "naniscript.label",
                    "match": "^[\\t ]*(#[\\t ]*)(\\s[\\s\\w|]*)[\\t ]*$",
                    "captures": {
                        "1": { "name": "naniscript.label" },
                        "2": { "name": "naniscript.label.spaceinlabel" }
                    }
                },
                {
                    "comment": "Missing label",
                    "name": "naniscript.label.missing",
                    "match": "^[\\t ]*#[\\t ]*$"
                }
            ]
        },
        { "include": "#generic-text" }
    ],
    "repository": {
        "command": {
            "patterns": [
                {
                    "comment": "Command - @...",
                    "match": "^[\\t ]*(@.+)[\\t ]*$",
                    "name": "naniscript.command.parameter.value",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "comment": "@Command",
                                    "name": "naniscript.command",
                                    "match": "@\\s*\\w+"
                                },
                                { "include": "#params" }
                            ]
                        }
                    }
                }
            ]
        },
        "inline-command": {
            "patterns": [
                {
                    "comment": "Inline command - [command parameters]",
                    "name": "naniscript.command.parameter.value",
                    "match": "(\\[[\\t ]*[<\\w]+)([^\\r\\n\\[\\]]*)(\\]|$)",
                    "captures": {
                        "1": { "name": "naniscript.command.inline" },
                        "2": { "patterns": [{ "include": "#params" }] },
                        "3": { "name": "naniscript.command.inline" }
                    }
                },
                {
                    "name": "naniscript.command.missing",
                    "match": "\\[\\s*\\]"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "comment": "Empty expression",
                    "name": "naniscript.expression.missingbody",
                    "match": "(?<!\\\\)\\{\\s*((?<!\\\\)\\}|$)"
                },
                {
                    "comment": "Basic expression. Handles escaped {} but does not handle nested subexpressions.",
                    "name": "naniscript.expression",
                    "match": "(?<!\\\\)\\{(?:[^\\[\\]\\{\\}]*|\\\\\\{|\\\\\\})*((?<!\\\\)\\}|$)"
                },
                {
                    "comment": "Detects nested subexpressions. {{x} + 1.2} will match. {{x - 1} + {y} + 1} will not match the outer brackets",
                    "name": "naniscript.expression",
                    "match": "(?<!\\\\)\\{((?:[^\\[\\]\\{\\}]*|\\\\\\{|\\\\\\})*)(?<!\\\\)\\{(?:[^\\[\\]\\{\\}]*|\\\\\\{|\\\\\\})*((?<!\\\\)\\})(?:[^\\[\\]\\{\\}]*|\\\\\\{|\\\\\\})*((?<!\\\\)\\}|$)"
                }
            ]
        },
        "text-identifier": {
            "patterns": [
                {
                    "comment": "Text Identifier - |#Textid|",
                    "name": "naniscript.textidentifier",
                    "match": "(?<!\\\\)\\|#&*[\\w-]+\\|"
                },
                {
                    "comment": "Text Identifier - |#|",
                    "name": "naniscript.textidentifier.missingbody",
                    "match": "(?<!\\\\)\\|#\\|"
                },
                {
                    "comment": "Text Identifier not closed- |# |#",
                    "name": "naniscript.textidentifier.missingbody",
                    "match": "(?<!\\\\)\\|#\\w*(\\s|$)"
                }
            ]
        },
        "bool-flags": {
            "patterns": [
                {
                    "comment": "Boolean Flag - !",
                    "name": "naniscript.command.parameter.value",
                    "match": "!"
                }
            ]
        },
        "params": {
            "patterns": [
                { "include": "#expression" },
                { "include": "#text-identifier" },
                {
                    "comment": "Parameter ID - id:",
                    "name": "naniscript.command.parameter.id",
                    "match": "\\s\\w+:"
                },
                {
                    "comment": "Parameter ID With Positive Boolean Flag - id!",
                    "name": "naniscript.command.parameter.id",
                    "match": "\\s\\w+(!)(\\s|$)+",
                    "captures": { "0": { "patterns": [{ "include": "#bool-flags" }] } }
                },
                {
                    "comment": "Parameter ID With Negative Boolean Flag - !id",
                    "name": "naniscript.command.parameter.id",
                    "match": "(!)\\w+",
                    "captures": { "0": { "patterns": [{ "include": "#bool-flags" }] } }
                },
                {
                    "comment": "Quoted String - \"String\"",
                    "name": "naniscript.quoted-text",
                    "match": "\"(?:[^\"\\\\]|\\\\.)*\"",
                    "captures": {
                        "0": {
                            "patterns": [
                                { "include": "#text-identifier" },
                                { "include": "#expression" }
                            ]
                        }
                    }
                }
            ]
        },
        "generic-text": {
            "name": "naniscript.generic-text",
            "match": "^\\s*(\\S+: ){0,1}(.+)",
            "captures": {
                "1": { "patterns": [{ "name": "naniscript.author", "match": "\\S+:" }] },
                "2": {
                    "patterns": [
                        {
                            "name": "naniscript.generic-text.escaped-char",
                            "comment": "Escaped characters",
                            "match": "\\\\[{}\\[\\]\"]"
                        },
                        { "include": "#expression" },
                        { "include": "#text-identifier" },
                        { "include": "#inline-command" }
                    ]
                }
            }
        }
    }
}
