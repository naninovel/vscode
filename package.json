{
    "name": "naninovel",
    "version": "1.8.0",
    "displayName": "Naninovel",
    "description": "IDE features for NaniScript â€” scenario scripting language for Naninovel visual novel engine.",
    "author": "Elringus",
    "publisher": "Elringus",
    "homepage": "https://naninovel.com",
    "icon": "assets/package-icon.png",
    "keywords": ["NaniScript", "Naninovel Script", "Scenario", "Novel", "nani"],
    "bugs": { "url": "https://naninovel.com/support" },
    "repository": { "type": "git", "url": "https://github.com/Naninovel/VSCode.git" },
    "browser": "./dist/extension.js",
    "engines": { "vscode": "^1.67.0" },
    "categories": ["Programming Languages"],
    "activationEvents": [
        "onLanguage:naniscript",
        "onCommand:naninovel.goto"
    ],
    "contributes": {
        "languages": [
            {
                "id": "naniscript",
                "aliases": ["NaniScript", "naniscript"],
                "extensions": [".nani"],
                "configuration": "./language-configuration.json",
                "icon": { "light": "./assets/script-icon.png", "dark": "./assets/script-icon.png" }
            }
        ],
        "configurationDefaults": {
            "[naniscript]": {
                "editor.wordWrap": "on",
                "editor.wordBasedSuggestions": false,
                "editor.semanticHighlighting.enabled": true
            }
        },
        "configuration": {
            "title": "Naninovel",
            "properties": {
                "naninovel.bridgingEnabled": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable bridging service for communication with a Unity or Web Naninovel project. Used to sync project metadata, show currently played script lines, route goto requests, etc."
                },
                "naninovel.bridgingPort": {
                    "scope": "resource",
                    "type": "number",
                    "minimum": 1025,
                    "maximum": 65535,
                    "default": 41016,
                    "markdownDescription": "Preferred bridging server port number to connect to. The extension will scan multiple ports starting from the preferred one when attempting to find the server. Only applies when `#naninovel.bridgingEnabled#` is enabled."
                },
                "naninovel.updateMetadata": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to sync custom project metadata when connecting to the bridging server and when the metadata is regenerated in the project."
                },
                "naninovel.cacheMetadata": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to cache custom metadata and share it across VS Code instances (including web)."
                },
                "naninovel.highlightPlayedLines": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to open currently played script file and highlight the played line."
                }
            }
        },
        "commands": [
            {
                "command": "naninovel.goto",
                "title": "Goto (Naninovel)",
                "category": "Naninovel"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "when": "resourceLangId == naniscript",
                    "command": "naninovel.goto",
                    "group": "navigation"
                }
            ]
        },
        "semanticTokenTypes": [
            { "id": "EmptyLine", "description": "An empty line." },
            { "id": "CommentLine", "description": "Comment string." },
            { "id": "CommentText", "description": "Text of the comment." },
            { "id": "LabelLine", "description": "Script navigation anchor." },
            { "id": "LabelText", "description": "Text of the label." },
            { "id": "GenericTextLine", "description": "Message text with optional inlined commands." },
            { "id": "CommandLine", "description": "A script command to execute on playback." },
            { "id": "Command", "description": "Contents of the command." },
            { "id": "CommandIdentifier", "description": "Identifier or alias of the command." },
            { "id": "Parameter", "description": "Parameter of the command" },
            { "id": "ParameterIdentifier", "description": "Identifier or alias of the parameter." },
            { "id": "ParameterValue", "description": "Value of the command parameter." },
            { "id": "InlinedCommand", "description": "A command inlined to generic text line." },
            { "id": "Expression", "description": "A dynamic expression to evaluate at runtime." },
            { "id": "GenericTextPrefix", "description": "A prefix with author ID and appearance placed before generic text line." },
            { "id": "GenericTextAuthor", "description": "Author identifier of the generic text line." },
            { "id": "GenericTextAuthorAppearance", "description": "Appearance of the the generic text line author." },
            { "id": "Error", "description": "Script parse error." }
        ],
        "semanticTokenScopes": [
            {
                "scopes": {
                    "CommentLine": ["comment"],
                    "CommentText": ["comment"],
                    "LabelLine": ["entity.name.namespace"],
                    "LabelText": ["entity.name.namespace"],
                    "GenericTextLine": ["entity.other"],
                    "CommandLine": ["entity.other.attribute-name"],
                    "Command": ["entity.other.attribute-name"],
                    "CommandIdentifier": ["entity.other.attribute-name"],
                    "Parameter": ["string"],
                    "ParameterIdentifier": ["string"],
                    "ParameterValue": ["entity.name.function"],
                    "InlinedCommand": ["entity.other.attribute-name"],
                    "Expression": ["keyword.control"],
                    "GenericTextPrefix": ["entity.name.function"],
                    "GenericTextAuthor": ["entity.name.function"],
                    "GenericTextAuthorAppearance": ["entity.name.function"],
                    "Error": ["invalid"]
                }
            }
        ]
    },
    "scripts": {
        "build": "webpack --mode production",
        "package": "vsce package"
    },
    "devDependencies": {
        "backend": "file:./backend",
        "@naninovel/common": "^1.0.9",
        "@naninovel/language": "^1.0.0",
        "vscode-languageclient": "^8.0.1",
        "@types/vscode": "^1.67.0",
        "typescript": "^4.7.2",
        "webpack": "^5.72.1",
        "webpack-cli": "^4.9.2",
        "ts-loader": "^9.3.0",
        "path-browserify": "^1.0.1",
        "vsce": "^2.8.0"
    }
}
