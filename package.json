{
    "name": "naninovel",
    "version": "1.20.0",
    "displayName": "Naninovel",
    "description": "IDE features for NaniScript â€” scenario scripting language for Naninovel visual novel engine.",
    "author": "Elringus",
    "publisher": "Elringus",
    "homepage": "https://naninovel.com",
    "icon": "assets/package-icon.png",
    "keywords": ["NaniScript", "Naninovel Script", "Scenario", "Novel", "nani"],
    "bugs": { "url": "https://naninovel.com/support" },
    "repository": { "type": "git", "url": "git+https://github.com/naninovel/vscode.git" },
    "browser": "./dist/extension.js",
    "engines": { "vscode": "^1.94.0" },
    "categories": ["Programming Languages"],
    "activationEvents": [
        "onLanguage:naniscript",
        "onCommand:naninovel.goto"
    ],
    "contributes": {
        "languages": [
            {
                "id": "naniscript",
                "aliases": ["NaniScript", "naniscript"],
                "extensions": [".nani"],
                "configuration": "./syntax/language-configuration.json",
                "icon": { "light": "./assets/script-icon.svg", "dark": "./assets/script-icon.svg" }
            }
        ],
        "grammars": [
            {
                "language": "naniscript",
                "scopeName": "source.naniscript",
                "path": "./syntax/naniscript.tmGrammar.json"
            }
        ],
        "configurationDefaults": {
            "breadcrumbs.enabled": false,
            "files.exclude": { "**/*.meta": true },
            "cSpell.enableFiletypes": ["naniscript"],
            "editor.semanticTokenColorCustomizations": {
                "[*Dark*][*Night*][*Abyss*][*Monokai*]": {
                    "enabled": true,
                    "rules": {
                        "CommentLine": "#5d6470",
                        "CommentText": "#5d6470",
                        "LabelLine": "#9bc37c",
                        "LabelText": "#9bc37c",
                        "CommandLine": "#6cb2ed",
                        "InlinedCommand": "#6cb2ed",
                        "Command": "#6cb2ed",
                        "CommandIdentifier": "#6cb2ed",
                        "Parameter": "#cd9769",
                        "ParameterIdentifier": "#cd9769",
                        "ParameterValue": "#e2be7f",
                        "LocalizableValue": "#acb2be",
                        "GenericTextLine": "#acb2be",
                        "GenericTextPrefix": "#e2be7f",
                        "GenericTextAuthor": "#e2be7f",
                        "GenericTextAuthorAppearance": "#e2be7f",
                        "Expression": "#62b8c1",
                        "TextIdentifier": "#5d6470",
                        "WaitFlag": "#6cb2ed",
                        "Error": "#d14e4e"
                    }
                },
                "[*Light*][*Day*][*Bright*]": {
                    "enabled": true,
                    "rules": {
                        "CommentLine": "#acb5c6",
                        "CommentText": "#acb5c6",
                        "LabelLine": "#51a612",
                        "LabelText": "#51a612",
                        "CommandLine": "#257dc8",
                        "InlinedCommand": "#257dc8",
                        "Command": "#257dc8",
                        "CommandIdentifier": "#257dc8",
                        "Parameter": "#c642a5",
                        "ParameterIdentifier": "#c642a5",
                        "ParameterValue": "#9250bf",
                        "LocalizableValue": "#4b5871",
                        "GenericTextLine": "#4b5871",
                        "GenericTextPrefix": "#9250bf",
                        "GenericTextAuthor": "#9250bf",
                        "GenericTextAuthorAppearance": "#9250bf",
                        "Expression": "#3abfb3",
                        "TextIdentifier": "#acb5c6",
                        "WaitFlag": "#257dc8",
                        "Error": "#be2222"
                    }
                }
            },
            "editor.tokenColorCustomizations": {
                "[*Dark*][*Night*][*Abyss*][*Monokai*]": {
                    "textMateRules": [
                        { "scope": ["naniscript.comment"], "settings": { "foreground": "#5d6470" } },
                        { "scope": ["naniscript.label"], "settings": { "foreground": "#9bc37c" } },
                        { "scope": ["naniscript.command"], "settings": { "foreground": "#6cb2ed" } },
                        { "scope": ["naniscript.command.parameter.id"], "settings": { "foreground": "#cd9769" } },
                        { "scope": ["naniscript.command.parameter.value"], "settings": { "foreground": "#e2be7f" } },
                        { "scope": ["naniscript.generic-text"], "settings": { "foreground": "#acb2be" } },
                        { "scope": ["naniscript.author"], "settings": { "foreground": "#e2be7f" } },
                        { "scope": ["naniscript.expression"], "settings": { "foreground": "#62b8c1" } },
                        { "scope": ["naniscript.text-identifier"], "settings": { "foreground": "#5d6470" } }
                    ]
                },
                "[*Light*][*Day*][*Bright*]": {
                    "textMateRules": [
                        { "scope": ["naniscript.comment"], "settings": { "foreground": "#acb5c6" } },
                        { "scope": ["naniscript.label"], "settings": { "foreground": "#51a612" } },
                        { "scope": ["naniscript.command"], "settings": { "foreground": "#257dc8" } },
                        { "scope": ["naniscript.command.parameter.id"], "settings": { "foreground": "#c642a5" } },
                        { "scope": ["naniscript.command.parameter.value"], "settings": { "foreground": "#9250bf" } },
                        { "scope": ["naniscript.generic-text"], "settings": { "foreground": "#4b5871" } },
                        { "scope": ["naniscript.author"], "settings": { "foreground": "#9250bf" } },
                        { "scope": ["naniscript.expression"], "settings": { "foreground": "#3abfb3" } },
                        { "scope": ["naniscript.text-identifier"], "settings": { "foreground": "#acb5c6" } }
                    ]
                }
            },
            "[naniscript]": {
                "files.eol": "\n",
                "editor.wordWrap": "on",
                "editor.occurrencesHighlight": "off",
                "editor.wordBasedSuggestions": "off",
                "editor.suggest.showWords": false,
                "editor.bracketPairColorization.enabled": false,
                "editor.semanticHighlighting.enabled": true
            }
        },
        "configuration": {
            "title": "Naninovel",
            "properties": {
                "naninovel.scenarioRoot": {
                    "scope": "resource",
                    "type": "string",
                    "default": "Assets/Scenario",
                    "description": "Directory under which all the scenario scripts (.nani files) are stored; used to resolve local script paths. When the directory is not found, assumes current workspace is the scenario root."
                },
                "naninovel.bridgingEnabled": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable bridging service for communication with a Unity or Web Naninovel project. Used to sync project metadata, show currently played script lines, route goto requests, etc."
                },
                "naninovel.bridgingPort": {
                    "scope": "resource",
                    "type": "number",
                    "minimum": 1025,
                    "maximum": 65535,
                    "default": 41016,
                    "markdownDescription": "Preferred bridging server port number to connect to. The extension will scan multiple ports starting from the preferred one when attempting to find the server. Only applies when `#naninovel.bridgingEnabled#` is enabled."
                },
                "naninovel.updateMetadata": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to sync custom project metadata when connecting to the bridging server and when the metadata is regenerated in the project."
                },
                "naninovel.cacheMetadata": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to cache custom metadata and share it across VS Code instances (including web)."
                },
                "naninovel.highlightPlayedLines": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to open currently played script file and highlight the played line."
                },
                "naninovel.loadAllScripts": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to load and compile all the naninovel scripts in project when the extension is initilalized. Required for project-wide diagnostics and cross-script navigation."
                },
                "naninovel.diagnoseSyntax": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to report errors in naniscript syntax: missing command identifiers, multiple nameless parameters, unclosed inlined commands, etc."
                },
                "naninovel.diagnoseSemantics": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to report metadata-related errors: unknown command and parameters, missing required parameters, incorrect value types, etc."
                },
                "naninovel.diagnoseNavigation": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to report errors related to script navigation: unknown endpoints (eg, @goto commands to unknown script or label), unused labels, etc. `#naninovel.loadAllScripts#` is required to analyze endpoints inside un-opened scripts."
                },
                "naninovel.debounceDelay": {
                    "scope": "resource",
                    "type": "number",
                    "default": 500,
                    "markdownDescription": "Delay between processing document changes, in milliseconds. Decrease for faster response at the cost of performance."
                },
                "naninovel.refactorFileRenames": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Whether to update endpoints (such as paths of the @goto commands) when renaming script files and folders."
                }
            }
        },
        "commands": [
            {
                "command": "naninovel.goto",
                "title": "Goto (Naninovel)",
                "category": "Naninovel"
            },
            {
                "command": "naninovel.purge",
                "title": "Purge Cached Metadata",
                "category": "Naninovel"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "when": "resourceLangId == naniscript",
                    "command": "naninovel.goto",
                    "group": "navigation"
                }
            ]
        },
        "semanticTokenTypes": [
            { "id": "Error", "description": "Script parse error." },
            { "id": "EmptyLine", "description": "An empty line." },
            { "id": "CommentLine", "description": "Comment string." },
            { "id": "CommentText", "description": "Text of the comment." },
            { "id": "LabelLine", "description": "Script navigation anchor." },
            { "id": "LabelText", "description": "Text of the label." },
            { "id": "GenericTextLine", "description": "Message text with optional inlined commands." },
            { "id": "CommandLine", "description": "A script command to execute on playback." },
            { "id": "Command", "description": "Contents of the command." },
            { "id": "CommandIdentifier", "description": "Identifier or alias of a command." },
            { "id": "Parameter", "description": "Parameter of the command" },
            { "id": "ParameterIdentifier", "description": "Identifier or alias of a parameter." },
            { "id": "ParameterValue", "description": "Value of a command parameter." },
            { "id": "LocalizableValue", "description": "Localizable value of a command parameter, usually displayed to the player." },
            { "id": "InlinedCommand", "description": "A command inlined to generic text line." },
            { "id": "Expression", "description": "A dynamic expression to evaluate at runtime." },
            { "id": "GenericTextPrefix", "description": "A prefix with author ID and appearance placed before generic text line." },
            { "id": "GenericTextAuthor", "description": "Author identifier of the generic text line." },
            { "id": "GenericTextAuthorAppearance", "description": "Appearance of the the generic text line author." },
            { "id": "TextIdentifier", "description": "Unique (inside script) persistent identifier of the associated text value." },
            { "id": "WaitFlag", "description": "Controls whether the command should be awaited before executing next one." }
        ],
        "semanticTokenScopes": [
            {
                "scopes": {
                    "Error": ["invalid"],
                    "CommentLine": ["comment"],
                    "CommentText": ["comment"],
                    "LabelLine": ["entity.name.namespace"],
                    "LabelText": ["entity.name.namespace"],
                    "GenericTextLine": ["entity.other"],
                    "CommandLine": ["entity.other.attribute-name"],
                    "Command": ["entity.other.attribute-name"],
                    "CommandIdentifier": ["entity.other.attribute-name"],
                    "Parameter": ["string"],
                    "ParameterIdentifier": ["string"],
                    "ParameterValue": ["entity.name.function"],
                    "LocalizableValue": ["entity.other"],
                    "InlinedCommand": ["entity.other.attribute-name"],
                    "Expression": ["keyword.control"],
                    "GenericTextPrefix": ["entity.name.function"],
                    "GenericTextAuthor": ["entity.name.function"],
                    "GenericTextAuthorAppearance": ["entity.name.function"],
                    "TextIdentifier": ["comment"],
                    "WaitFlag": ["entity.other.attribute-name"]
                }
            }
        ]
    },
    "scripts": {
        "update": "ncu --interactive",
        "backend": "dotnet publish backend",
        "build": "esbuild src/extension.ts --bundle --outfile=dist/extension.js --format=cjs --external:vscode --external:process --external:module",
        "package": "sh scripts/package.sh",
        "publish": "sh scripts/publish.sh"
    },
    "dependencies": {
        "backend": "file:backend",
        "@naninovel/common": "^1.2.40",
        "@naninovel/language": "^1.5.0",
        "vscode-languageclient": "^9.0.1"
    },
    "devDependencies": {
        "typescript": "^5.6.3",
        "@types/vscode": "^1.94.0",
        "@vscode/vsce": "^3.1.1",
        "esbuild": "^0.24.0",
        "npm-check-updates": "^17.1.3"
    }
}
